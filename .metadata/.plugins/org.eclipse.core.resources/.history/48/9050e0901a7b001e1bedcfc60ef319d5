import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.Schedules
import java.util.concurrent.atomic.AtomicInteger


agent Test {

	uses Lifecycle, Logging

	on Initialize {
		spawn(CounterAgent)
		spawn(SecondAgent)
		killMe
	}

}

/** 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent CounterAgent {

	uses Lifecycle, Schedules, DefaultContextInteractions, Behaviors, Logging

	val count = new AtomicInteger

	var started = false

	on Initialize {
		loggingName = "COUNTER"
		info("Starting")
		task("discovery").every(1000) [
			emit(new Hello)
		]
	}

	on Hello [!isFromMe && !started] {
		info("Found another agent => " + occurrence.source)
		info("I'm " + defaultAddress)
		started = true
		task("discovery").cancel

		/* cancel the task launch in the Initialize
		 */
		info("Starting to count")
		wake(new Count)

		/* send itself the first Count event
	 */
	}

	on Count {
		info("count => " + count.get)
		if (count.get == 3) {
			info("orders Partner to die")
			emit(new Die)
			killMe
		} else {
			in(1000) [
				count.incrementAndGet
				wake(new Count)
			]
		}
	}

}

/** 
 * @author <a href="http://www.ciad-lab.fr/nicolas_gaud">Nicolas Gaud</a>
 */
agent SecondAgent {

	uses Lifecycle, DefaultContextInteractions, Logging

	on Initialize {
		loggingName = "PARTNER"
		info("Starting")
	}

	on Hello [!isFromMe] {

		/* test the emitter address to be sure it is not a self message
			 */
		info("Say hello!")
		emit(new Hello)
	}

	on Die {
		info("is dying")
		killMe
	}

}
